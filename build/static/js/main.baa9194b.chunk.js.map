{"version":3,"sources":["Signin.tsx","Signout.tsx","Components/ClassPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SignIn","className","onClick","provider","firebase","auth","GoogleAuthProvider","console","log","signInWithPopup","SignOut","currentUser","signOut","ClassPage","useCollectionData","firestore","collection","where","uid","snapshotListenOptions","includeMetadataChanges","messages","loading","error","JSON","stringify","map","doc","Fragment","id","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","Main","App","useAuthState","user","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mSAGe,SAASA,IAQtB,OACE,mCACE,wBAAQC,UAAU,UAAUC,QATP,WACvB,IAAMC,EAAW,IAAIC,IAASC,KAAKC,mBACnCC,QAAQC,IAAI,MAAMH,GAClBA,EAAKI,gBAAgBN,GACrBI,QAAQC,IAAI,OAAQH,IAKlB,mCCXS,SAASK,IACtB,OACEL,EAAKM,aACH,wBAAQV,UAAU,WAAWC,QAAS,kBAAMG,EAAKO,WAAjD,sB,YC6CSC,EA1CG,WAAO,IAAD,MAWaC,YACjCV,IACGW,YACAC,WAAW,WACXC,MAAM,MAAO,KAHhB,UAGsBZ,EAAKM,mBAH3B,aAGsB,EAAkBO,KACxC,CACEC,sBAAuB,CAAEC,wBAAwB,KAjB/B,mBAWfC,EAXe,KAWLC,EAXK,KAWIC,EAXJ,KAuBtB,OAFAhB,QAAQC,IAAR,UAAYH,EAAKM,mBAAjB,aAAY,EAAkBO,KAG5B,gCACGK,GAAS,6CAAgBC,KAAKC,UAAUF,MACxCD,GAAW,0DAEXD,GACCA,EAASK,KAAI,SAACC,GAAD,OACX,eAAC,IAAMC,SAAP,WAA8BJ,KAAKC,UAAUE,GAA7C,MAAqBA,EAAIE,WCrBnCzB,IAAS0B,cAAc,CACrBC,OAAQ,0CACRC,WAAY,8BACZC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGV,IAAMhC,EAAOD,IAASC,OACJD,IAASW,YACTX,IAASkC,YAkClC,IAAMC,EAAO,WACX,OAAO,cAAC,EAAD,KAEMC,EAnCf,WAAgB,IAAD,EACEC,YAAapC,GAArBqC,EADM,oBAGb,OACE,sBAAKzC,UAAU,MAAf,UACE,cAACS,EAAD,IACA,kCACGgC,EACC,cAAC,EAAD,IAiBA,cAAC1C,EAAD,UC1CK2C,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.baa9194b.chunk.js","sourcesContent":["import firebase from \"firebase\";\nimport { auth } from \"./App\";\n\nexport default function SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    console.log(\"pre\",auth);\n    auth.signInWithPopup(provider);\n    console.log(\"post\", auth);\n  };\n\n  return (\n    <>\n      <button className=\"sign-in\" onClick={signInWithGoogle}>\n        Sign in with Google\n      </button>\n    </>\n  );\n}\n","import { auth } from \"./App\";\n\nexport default function SignOut() {\n  return (\n    auth.currentUser && (\n      <button className=\"sign-out\" onClick={() => auth.signOut()}>\n        Sign Out\n      </button>\n    )\n  );\n}\n","import firebase from \"firebase\";\nimport React from \"react\";\nimport {\n  useCollection,\n  useCollectionData,\n} from \"react-firebase-hooks/firestore\";\nimport { auth, firestore } from \"../App\";\n\nconst ClassPage = () => {\n  //   const classesRef = firestore.collection(\"classes\");\n  //   const query = classesRef.orderBy(\"createdAt\").limit(25);\n\n  //   const [messages, loading, error] = useCollection(\n  //     firebase.firestore().collection(\"classes\"),\n  //     {\n  //       snapshotListenOptions: { includeMetadataChanges: true },\n  //     }\n  //   );\n\n  const [messages, loading, error] = useCollectionData(\n    firebase\n      .firestore()\n      .collection(\"classes\")\n      .where(\"uid\", \"==\", auth.currentUser?.uid),\n    {\n      snapshotListenOptions: { includeMetadataChanges: true },\n    }\n  );\n\n  console.log(auth.currentUser?.uid);\n\n  return (\n    <div>\n      {error && <strong>Error: {JSON.stringify(error)}</strong>}\n      {loading && <span>Collection: Loading...</span>}\n\n      {messages &&\n        messages.map((doc: any) => (\n          <React.Fragment key={doc.id}>{JSON.stringify(doc)},</React.Fragment>\n        ))}\n      {/* {messages &&\n        messages.docs.map((doc) => (\n          <React.Fragment key={doc.id}>\n            {JSON.stringify(doc.data())},{\" \"}\n          </React.Fragment>\n        ))} */}\n    </div>\n  );\n};\n\nexport default ClassPage;\n","import React, { useRef, useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Test from \"./comp\";\nimport \"./App.css\";\n\nimport firebase from \"firebase/app\";\nimport \"firebase/firestore\";\nimport \"firebase/auth\";\nimport \"firebase/analytics\";\n\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport SignIn from \"./Signin\";\nimport SignOut from \"./Signout\";\nimport ClassPage from \"./Components/ClassPage\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCwxiDrVBzpiEtz5rL9eJt6bZIdymyTQ30\",\n  authDomain: \"ga-comments.firebaseapp.com\",\n  projectId: \"ga-comments\",\n  storageBucket: \"ga-comments.appspot.com\",\n  messagingSenderId: \"671616870740\",\n  appId: \"1:671616870740:web:74456365bd146415e180c1\",\n  measurementId: \"G-MMQSJ4ES92\",\n});\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nexport const analytics = firebase.analytics();\n\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App\">\n      <SignOut />\n      <section>\n        {user ? (\n          <Main />\n        ) : (\n          // <header className=\"App-header\">\n          //   <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          //   <p>\n          //     Edit <code>src/App.tsx</code> and save to reload.\n          //   </p>\n          //   <Test />\n          //   <a\n          //     className=\"App-link\"\n          //     href=\"https://reactjs.org\"\n          //     target=\"_blank\"\n          //     rel=\"noopener noreferrer\"\n          //   >\n          //     Learn React\n          //   </a>\n          // </header>\n          <SignIn />\n        )}\n      </section>\n    </div>\n  );\n}\n\nconst Main = () => {\n  return <ClassPage />;\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}