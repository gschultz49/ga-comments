{"version":3,"sources":["Components/Utils/Grid.tsx","Components/Students/StudentForm.tsx","img/remove_button.svg","Components/Utils/RemoveButtonIcon.tsx","utils.ts","Pages/CreateClassForm.tsx","Components/Utils/CardWrapper.tsx","Components/Classes/ClassCard.tsx","Components/Classes/CreateClassCard.tsx","Components/Classes/ClassGrid.tsx","Pages/Home.tsx","Pages/ViewClassForm.tsx","Pages/ViewStudent.tsx","Signin.tsx","img/logout.svg","Signout.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["defaultStyles","Grid","children","styles","className","clsx","StudentForm","students","name","remove","push","Fragment","map","student","index","isEditable","htmlFor","render","msg","text","as","value","firstName","lastName","gender","length","type","RemoveButtonIcon","src","removeButton","alt","CLASSES_COLLECTION","STUDENT_COLLECTION","getTimestamp","firebase","firestore","Timestamp","now","modifyTimestamp","modifiedAt","modifyAndCreateTimestamp","createdAt","redirectTo","history","page","removeClass","id","collection","isActive","doc","set","merge","setIsActive","DEFAULT_STUDENT","produceDefaults","n","defaultObj","defaults","i","RemoveButton","onClick","e","createStudentAndClass","a","teacherId","add","classIDRef","batch","forEach","docRef","classID","commit","console","error","log","InlineError","NewStudentSchema","Yup","shape","min","max","required","ensure","studentsValidation","of","FormSchema","AddStudentButton","CreateClassForm","useAuthState","auth","user","useHistory","studentsData","useState","displayName","initialValues","onSubmit","values","uid","validationSchema","cardClasses","CardWrapper","ClassCard","toPath","to","ClassCardProvider","url","useRouteMatch","CreateClassCard","CreateClassCardProvider","ClassGrid","classes","newClass","c","ClassGridProvider","useCollectionData","where","idField","snapshotListenOptions","includeMetadataChanges","loading","JSON","stringify","filter","HomePage","addStudentToExistingClass","StudentsSchema","ViewClassForm","undefined","window","confirm","style","borderCollapse","borderSpacing","removeStudentFromClass","resetForm","ViewClassFormProvider","useParams","useDocumentData","targetClass","ViewStudent","studentID","SignIn","provider","GoogleAuthProvider","signInWithPopup","SignOut","currentUser","signOut","logout","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","location","hostname","useEmulator","Main","Home","path","App","photoURL","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"oWAGMA,EAAgB,CAAC,OAAQ,cAAe,UAM/BC,EAJF,SAAC,GAAiE,IAA/DC,EAA8D,EAA9DA,SAAUC,EAAoD,EAApDA,OACxB,OAAO,qBAAKC,UAAWC,YAAK,CAACL,EAAeG,IAArC,SAAgDD,KC0E1CI,EArEK,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OAClB,cAAC,EAAD,CAAMJ,OAAQ,CAAC,eAAf,SACE,cAAC,IAAD,CAAYK,KAAK,WAAjB,SACG,gBAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,KAAX,OACC,eAAC,IAAMC,SAAP,WACGJ,EAASK,KAAI,SAACC,EAAkBC,GAC/B,OAAID,EAAQE,aAAqC,IAAvBF,EAAQE,WAE9B,eAAC,IAAMJ,SAAP,WACE,sBAAKP,UAAWC,YAAK,CAAC,OAAQ,aAA9B,UACE,uBAAOW,QAAO,mBAAcF,EAAd,eAAd,wBAGA,cAAC,IAAD,CAAON,KAAI,mBAAcM,EAAd,iBACX,cAAC,IAAD,CACEN,KAAI,mBAAcM,EAAd,eACJG,OAAQ,SAACC,GAAD,OAAS,cAAC,EAAD,CAAaC,KAAMD,UAGxC,sBAAKd,UAAWC,YAAK,CAAC,OAAQ,aAA9B,UACE,uBAAOW,QAAO,mBAAcF,EAAd,cAAd,uBAGA,cAAC,IAAD,CAAON,KAAI,mBAAcM,EAAd,gBACX,cAAC,IAAD,CACEN,KAAI,mBAAcM,EAAd,cACJG,OAAQ,SAACC,GAAD,OAAS,cAAC,EAAD,CAAaC,KAAMD,UAIxC,sBAAKd,UAAWC,YAAK,CAAC,OAAQ,aAA9B,UACE,uBAAOW,QAAO,mBAAcF,EAAd,YAAd,oBACA,eAAC,IAAD,CAAOM,GAAG,SAASZ,KAAI,mBAAcM,EAAd,YAAvB,UACE,wBAAQO,MAAM,GAAd,uBACA,wBAAQA,MAAM,OAAd,kBACA,wBAAQA,MAAM,SAAd,oBACA,wBAAQA,MAAM,QAAd,sBAEF,cAAC,IAAD,CACEb,KAAI,mBAAcM,EAAd,YACJG,OAAQ,SAACC,GAAD,OAAS,cAAC,EAAD,CAAaC,KAAMD,UAGxC,cAAC,EAAD,CAAcT,OAAQA,EAAQK,MAAOA,OAKvC,eAAC,EAAD,WACE,8BAAMD,EAAQS,YACd,8BAAMT,EAAQU,WACd,8BAAMV,EAAQW,SACd,cAAC,EAAD,CAAcf,OAAQA,EAAQK,MAAOA,UAK7C,cAAC,EAAD,CAAkBJ,KAAMA,IACvBH,EAASkB,OAAS,GACjB,8BACE,wBAAQC,KAAK,SAAb,+BCvEC,MAA0B,0CCQ1BC,EAPU,kBACvB,qBACEC,IAAKC,EACLC,IAAI,gBACJ1B,UAAW,wB,QCFF2B,EAAqB,UACrBC,EAAqB,WAErBC,EAAe,kBAAMC,IAASC,UAAUC,UAAUC,OAElDC,EAAkB,iBAAO,CAAEC,WAAYN,MACvCO,EAA2B,8BAAC,eAFC,CAAEC,UAAWR,MAIlDK,MAKQI,EAAa,SAACC,EAAcC,GACvCD,EAAQjC,KAAKkC,IAwBFC,EAAc,SAACC,IArBR,SAClBC,EACAD,EACAE,GAEAb,GACGY,WAAWA,GACXE,IAAIH,GACJI,IAHH,aAKMF,SAAUA,GACPV,KAEL,CAAEa,OAAO,IASbC,CAAYrB,EAAoBe,GAAI,ICbhCO,EAAkB,iBAAgB,CACtC/B,UALyB,GAMzBC,SALwB,GAMxBC,OALqB,GAMrBT,YAAY,IAGRuC,EAAkB,WAEtB,IAF2E,IAApDC,EAAmD,uDAA/C,EAAGC,EAA4C,uDAA/BH,EACrCI,EAAsB,GACnBC,EAAI,EAAGA,EAAIH,EAAGG,IACrBD,EAAS/C,KAAK8C,KAEhB,OAAOC,GA+CIE,EAAe,SAAC,GAMtB,IALLlD,EAKI,EALJA,OACAK,EAII,EAJJA,MAKA,OACE,qBACE8C,QAAS,SAACC,GACRpD,EAAOK,IAETV,UAAWC,YAAK,CAAC,OAAQ,gCAJ3B,SAME,8BACE,cAAC,EAAD,SAqBFyD,EAAqB,uCAAG,uCAAAC,EAAA,6DAC5BxD,EAD4B,EAC5BA,SACAH,EAF4B,EAE5BA,UACA4D,EAH4B,EAG5BA,UACArB,EAJ4B,EAI5BA,QAJ4B,kBAYDR,GAAUY,WAAWhB,GAAoBkC,IAAzC,aACvBzD,KAAMJ,EACN4D,UAAWA,EACXhB,UAAU,GACPR,MAhBqB,cAYpB0B,EAZoB,gBAmBlBC,EAAQhC,GAAUgC,QACxB5D,EAAS6D,SAAQ,SAACvD,GAChB,IAAIwD,EAASlC,GAAUY,WAAWf,GAAoBiB,MACtDkB,EAAMjB,IAAImB,EAAV,aACE/C,UAAWT,EAAQS,UACnBC,SAAUV,EAAQU,SAClBC,OAAQX,EAAQW,OAChB8C,QAASJ,EAAWpB,GACpBE,UAAU,GAIPR,SA/BiB,UAkClB2B,EAAMI,SAlCY,0DAoCxBC,QAAQC,MAAM,2BAAd,MApCwB,0DAuC1BD,QAAQC,MAAM,wBAAd,MAvC0B,QAyC5BD,QAAQE,IAAI,yBACZhC,EAAWC,EAAS,KA1CQ,iEAAH,sDA6CdgC,EAAc,SAAC,GAAD,IAAGxD,EAAH,EAAGA,KAAH,OACzB,mBAAGf,UAAU,eAAb,SAA6Be,KAGlByD,EAAmBC,MAAaC,MAAM,CACjDxD,UAAWuD,MACRE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZ1D,SAAUsD,MACPE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,YACZzD,OAAQqD,MAAaK,SAASD,SAAS,cAG5BE,EAAqB,CAChC5E,SAAUsE,MAAYO,GAAGR,IAGrBS,EAAaR,MAAaC,MAAb,2BACdK,GADc,IAEjB/E,UAAWyE,MACRE,IAAI,EAAG,cACPC,IAAI,GAAI,aACRC,SAAS,eAGDK,EAAmB,SAAC,GAA6B,IAA3B5E,EAA0B,EAA1BA,KACjC,OACE,qBACEkD,QAAS,SAACC,GACRnD,EAAI,WAAJ,cAAQ4C,EAAgB,MAE1BlD,UAAWC,YAAK,CAAC,mBAJnB,SAME,mDAKSkF,EAtKS,WAAO,IAAD,EACbC,YAAaC,IAArBC,EADqB,oBAEtB/C,EAAUgD,cAEVC,EAAetC,EAAgB,GAJT,EAMTuC,mBAAoBD,GAAhCrF,EANqB,oBAO5B,OACE,oCACE,kCACE,iDAAamF,QAAb,IAAaA,OAAb,EAAaA,EAAMI,iBAErB,kCACE,cAAC,IAAD,CACEC,cAAe,CAAExF,SAAUA,EAAUH,UAAW,IAChD4F,SAAQ,uCAAE,WAAOC,GAAP,SAAAlC,EAAA,sDACRD,EAAsB,CACpBvD,SAAU0F,EAAO1F,SACjBH,UAAW6F,EAAO7F,UAClB4D,UAAS,OAAE0B,QAAF,IAAEA,OAAF,EAAEA,EAAMQ,IACjBvD,QAASA,IALH,2CAAF,sDAQRwD,iBAAkBd,EAVpB,SAYG,gBAAGY,EAAH,EAAGA,OAAH,OACC,eAAC,IAAD,WACE,uBAAOjF,QAAQ,YAAf,yBACA,cAAC,IAAD,CAAOR,KAAM,cACb,cAAC,IAAD,CACEA,KAAI,YACJS,OAAQ,SAACC,GAAD,OAAS,cAAC,EAAD,CAAaC,KAAMD,OAEtC,cAAC,EAAD,CAAaX,SAAU0F,EAAO1F,uB,QC3EtC6F,EAAc,CAClB,YACA,aACA,gBACA,iBACA,YACA,aACA,kBACA,+BACA,SACA,OACA,OACA,iBACA,gBAWaC,EARK,SAAC,GAA6C,IAA3CnG,EAA0C,EAA1CA,SAAU0D,EAAgC,EAAhCA,QAAgC,IAAvBzD,cAAuB,MAAd,GAAc,EAC/D,OACE,qBAAKC,UAAWC,YAAK,CAAC+F,GAAF,mBAAkBjG,KAAUyD,QAASA,EAAzD,SACG1D,KCVMoG,EAAY,SAAC,GAKc,IAJtC9F,EAIqC,EAJrCA,KAGA+F,GACqC,EAHrCvC,UAGqC,EAFrClB,GAEqC,EADrCyD,QAEA,OACE,cAAC,IAAD,CAAMC,GAAID,EAAV,SACE,cAAC,EAAD,UACE,6BAAK/F,SAcEiG,EARW,SAAC,GAAyC,IAAvCjG,EAAsC,EAAtCA,KAAMwD,EAAgC,EAAhCA,UAAWlB,EAAqB,EAArBA,GACtC4D,EAAQC,cAARD,IACFH,EAAM,UAAMG,EAAN,iBAAkB5D,GAC5B,OACE,cAAC,EAAD,CAAWtC,KAAMA,EAAMwD,UAAWA,EAAWlB,GAAIA,EAAIyD,OAAQA,KC1BpDK,EAAkB,SAAC,GAAoC,IAAlCL,EAAiC,EAAjCA,OAChC,OACE,cAAC,IAAD,CAAMC,GAAID,EAAV,SACE,cAAC,EAAD,UACE,sDAWOM,EALiB,WAAO,IAC/BH,EAAQC,cAARD,IACN,OAAO,cAAC,EAAD,CAAiBH,OAAM,UAAKG,EAAL,wBCgB1BI,EAAY,SAAC,GAMZ,IALLC,EAKI,EALJA,QAKI,IAJJC,gBAII,SACJ,OACE,eAAC,EAAD,WACGA,EAAW,cAAC,EAAD,IAA8B,KAD5C,OAEGD,QAFH,IAEGA,OAFH,EAEGA,EAASnG,KAAI,SAACqG,GAAD,OACZ,cAAC,EAAD,CAAmBzG,KAAMyG,EAAEzG,KAAMwD,UAAWiD,EAAEjD,UAAWlB,GAAImE,EAAEnE,YAMxDoE,EAzCW,SAAC,GAIpB,IAHLlD,EAGI,EAHJA,UAGI,EAC8BmD,YAChCjF,IACGC,YACAY,WAAWhB,GACXqF,MAAM,YAAa,KAAMpD,GAC5B,CACEqD,QAAS,KACTC,sBAAuB,CAAEC,wBAAwB,KARjD,mBACGR,EADH,KACYS,EADZ,KACqB/C,EADrB,KAWJ,OACE,eAAC,IAAM9D,SAAP,WACG8D,GAAS,6CAAgBgD,KAAKC,UAAUjD,MACxC+C,GAAW,8CACZ,cAAC,EAAD,CAAWT,QAAO,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAASY,QAAO,SAAC9D,GAAD,OAAsB,IAAfA,EAAEb,kBCtBpC,SAAS4E,IAAY,IAAD,EAClBpC,YAAaC,IAArBC,EAD0B,oBAEjC,OACE,sBAAKtF,UAAW,OAAhB,UACE,oBAAIA,UAAW,gBAAf,0BACA,cAAC,EAAD,CAAW4D,UAAS,OAAE0B,QAAF,IAAEA,OAAF,EAAEA,EAAMQ,SCqBlC,IAAM2B,GAAyB,uCAAG,iCAAA9D,EAAA,6DAChCxD,EADgC,EAChCA,SACA+D,EAFgC,EAEhCA,QAFgC,SAQxBH,EAAQhC,GAAUgC,QACxB5D,EAAS6D,SAAQ,SAACvD,GAChB,IAAIwD,EAASlC,GAAUY,WAAWf,GAAoBiB,MACtDkB,EAAMjB,IAAImB,EAAV,aACE/C,UAAWT,EAAQS,UACnBC,SAAUV,EAAQU,SAClBC,OAAQX,EAAQW,OAChB8C,QAASA,EACTtB,UAAU,GAIPR,SApBuB,SAuBxB2B,EAAMI,SAvBkB,uDAyB9BC,QAAQC,MAAM,2BAAd,MAzB8B,yDAAH,sDA8DzBqD,GAAiBjD,MAAaC,MAAMK,GAE7B4C,GAAgB,SAAC,GAYvB,IAXL3H,EAWI,EAXJA,UAWI,IAVJqE,aAUI,WAVIuD,EAUJ,MATJR,eASI,SARJjH,EAQI,EARJA,SACA+D,EAOI,EAPJA,QAQM3B,EAAUgD,cAChB,OACE,eAAC,IAAMhF,SAAP,WACE,sBAAKP,UAAU,4BAAf,UACE,oBAAIA,UAAW,WAAf,SAA4BA,IAE5B,qBACEA,UAAWC,YAAK,kBAChBuD,QAAS,SAACC,GAENoE,OAAOC,QACL,uEAGFrF,EAAYyB,GACZ5B,EAAWC,EAAS,OAT1B,SAaE,mDAIH8B,GAAS,6CAAgBgD,KAAKC,UAAUjD,MACxC+C,GAAW,8CACZ,wBACEpH,UAAU,+BACV+H,MAAO,CAAEC,eAAgB,WAAYC,cAAe,UAFtD,UAIE,gCACE,+BACE,oBAAIjI,UAAU,QAAd,wBACA,oBAAIA,UAAU,QAAd,uBACA,oBAAIA,UAAU,QAAd,oBACA,oBAAIA,UAAU,QAAd,oBACA,oBAAIA,UAAU,eAGlB,uCACGG,QADH,IACGA,OADH,EACGA,EAAUK,KAAI,YAAmD,IAAhDU,EAA+C,EAA/CA,UAAWC,EAAoC,EAApCA,SAAUC,EAA0B,EAA1BA,OAAQsB,EAAkB,EAAlBA,GAE7C,OACE,qBACE1C,UAAWC,YAAqC,cADlD,UAIE,6BAAKiB,IACL,6BAAKC,IACL,6BAAKC,IACL,oBACEpB,UAAWC,YAAK,kBAChBuD,QAAS,SAACC,GACRnB,EAAWC,EAAD,mBAAsBG,KAHpC,yBAQA,oBACE1C,UAAWC,YACT,iBACA,OACA,OACA,+BAEFuD,QAAS,SAACC,GAENoE,OAAOC,QACL,kEPlIc,SAACpF,GACrCX,GACGY,WAAW,YACXE,IAAIH,GACJI,IAHH,aAKMoB,QAAS,IACNhC,KAEL,CAAEa,OAAO,IO4HOmF,CAAuBxF,IAb7B,SAiBE,cAAC,EAAD,QA9BGA,WAsCf,cAAC,IAAD,CACEiD,cAAe,CAAExF,SAAU,IAC3ByF,SAAQ,uCAAE,WAAOC,EAAP,kBAAAlC,EAAA,6DAAiBwE,EAAjB,EAAiBA,UACzB/D,QAAQE,IAAI,YAAauB,GADjB,SAEF4B,GAA0B,CAC9BtH,SAAU0F,EAAO1F,SACjB+D,QAASA,IAJH,OAMRiE,IANQ,2CAAF,wDAQRpC,iBAAkB2B,GAVpB,SAYG,gBAAG7B,EAAH,EAAGA,OAAH,OACC,cAAC,IAAD,UACE,cAAC,EAAD,CAAa1F,SAAU0F,EAAO1F,oBAQ3BiI,GAxJe,WAAO,IAC7BlE,EAAiCmE,cAAjCnE,QAD4B,EAGC6C,YACjCjF,IACGC,YACAY,WAAWf,GACXoF,MAAM,UAAW,KAAM9C,GACvB8C,MAAM,WAAY,MAAM,GAC3B,CACEC,QAAS,KACTC,sBAAuB,CAAEC,wBAAwB,KAXnB,mBAG3BhH,EAH2B,KAGjBiH,EAHiB,KAGR/C,EAHQ,OAcZiE,YACpBxG,IAASC,YAAYc,IAArB,UAA4BlB,EAA5B,YAAkDuC,IAClD,CACE+C,QAAS,KACTC,sBAAuB,CAAEC,wBAAwB,KAJ9CoB,EAd2B,oBAsBlC,OACE,cAAC,GAAD,CACErE,QAASA,EACTlE,UAAS,OAAEuI,QAAF,IAAEA,OAAF,EAAEA,EAAanI,KACxBiE,MAAOA,EACP+C,QAASA,EACTjH,SAAUA,KCjFDqI,GALK,WAAO,IACnBC,EAAmBJ,cAAnBI,UACN,OAAO,mDAAsBA,M,qBCChB,SAASC,KAMtB,OACE,mCAIE,cAAC,KAAD,CACEpH,KAAK,OACLkC,QAZmB,WACvB,IAAMmF,EAAW,IAAI7G,IAASuD,KAAKuD,mBACnCvD,GAAKwD,gBAAgBF,QCRV,WAA0B,mCCG1B,SAASG,KACtB,OACEzD,GAAK0D,aACH,qBAAK/I,UAAW,mBAAhB,SACE,sBAAKA,UAAW,wDAAyDwD,QAAS,kBAAM6B,GAAK2D,WAA7F,UACE,qBAAKxH,IAAKyH,GAAQvH,IAAI,gBAAgB1B,UAAW,gBACjD,wBAAQA,UAAU,WAAlB,2BCOV8B,IAASoH,cAAc,CACrBC,OAAQ,0CACRC,WAAY,8BACZC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGV,IAAMpE,GAAOvD,IAASuD,OAEhBtD,GAAYD,IAASC,YACTD,IAAS4H,YAED,cAA7B7B,OAAO8B,SAASC,UAClB7H,GAAU8H,YAAY,YAAa,MAmCrC,IAAMC,GAAO,WACX,OACE,mCACE,cAACC,GAAD,OAKN,SAASA,KACP,OACE,cAAC,IAAD,UACE,gCACE,uBAMA,uBASA,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAI,qBAAX,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAI,kBAAX,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAI,sBAAX,SACE,cAAC,GAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAACxC,EAAD,cA+BGyC,OAtGf,WAAgB,IAAD,IACE7E,YAAaC,IAArBC,EADM,oBAGb,OACE,sBAAKtF,UAAU,WAAf,UACGsF,EACC,sBAAKtF,UAAW,oCAAhB,UACE,sBAAKA,UAAW,qBAAhB,UACE,qBACEwB,IAAG,iBAAE8D,QAAF,IAAEA,OAAF,EAAEA,EAAM4E,gBAAR,QAAoB,GACvBxI,IAAK,cACL1B,UAAW,yBAEb,qBAAIA,UAAW,OAAf,4BAAgCsF,QAAhC,IAAgCA,OAAhC,EAAgCA,EAAMI,YAAtC,UAGF,cAACoD,GAAD,OAEA,KAEHxD,EACC,kCACE,cAAC,GAAD,MAGF,yBAAStF,UAAW,4CAApB,SACE,cAAC0I,GAAD,UC9CKyB,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAS/J,OACP,cAAC,IAAMgK,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.e332afe4.chunk.js","sourcesContent":["import clsx from \"clsx\";\nimport { ReactNode } from \"react\";\n\nconst defaultStyles = [\"grid\", \"grid-cols-3\", \"gap-10\"];\n\nconst Grid = ({ children, styles }: { children: ReactNode; styles?: any }) => {\n  return <div className={clsx([defaultStyles, styles])}>{children}</div>;\n};\n\nexport default Grid;\n","import clsx from \"clsx\";\nimport { FieldArray, Field, ErrorMessage } from \"formik\";\nimport React from \"react\";\nimport {\n  AddStudentButton,\n  InlineError,\n  RemoveButton,\n  Student,\n} from \"../../Pages/CreateClassForm\";\nimport Grid from \"../Utils/Grid\";\n\nconst StudentForm = ({ students }: { students: Student[] }) => (\n  <Grid styles={[\"grid-cols-4\"]}>\n    <FieldArray name=\"students\">\n      {({ remove, push }) => (\n        <React.Fragment>\n          {students.map((student: Student, index) => {\n            if (student.isEditable && student.isEditable === true) {\n              return (\n                <React.Fragment>\n                  <div className={clsx([\"flex\", \"flex-col\"])}>\n                    <label htmlFor={`students[${index}].firstName`}>\n                      First Name\n                    </label>\n                    <Field name={`students[${index}].firstName`}></Field>\n                    <ErrorMessage\n                      name={`students[${index}].firstName`}\n                      render={(msg) => <InlineError text={msg} />}\n                    />\n                  </div>\n                  <div className={clsx([\"flex\", \"flex-col\"])}>\n                    <label htmlFor={`students[${index}].lastName`}>\n                      Last Name\n                    </label>\n                    <Field name={`students[${index}].lastName`}></Field>\n                    <ErrorMessage\n                      name={`students[${index}].lastName`}\n                      render={(msg) => <InlineError text={msg} />}\n                    />\n                  </div>\n\n                  <div className={clsx([\"flex\", \"flex-col\"])}>\n                    <label htmlFor={`students[${index}].gender`}>Gender</label>\n                    <Field as=\"select\" name={`students[${index}].gender`}>\n                      <option value=\"\">Select...</option>\n                      <option value=\"Male\">Male</option>\n                      <option value=\"Female\">Female</option>\n                      <option value=\"Other\">Other</option>\n                    </Field>\n                    <ErrorMessage\n                      name={`students[${index}].gender`}\n                      render={(msg) => <InlineError text={msg} />}\n                    />\n                  </div>\n                  <RemoveButton remove={remove} index={index} />\n                </React.Fragment>\n              );\n            } else {\n              return (\n                <Grid>\n                  <div>{student.firstName}</div>\n                  <div>{student.lastName}</div>\n                  <div>{student.gender}</div>\n                  <RemoveButton remove={remove} index={index} />\n                </Grid>\n              );\n            }\n          })}\n          <AddStudentButton push={push} />\n          {students.length > 0 && (\n            <div>\n              <button type=\"submit\">Submit</button>\n            </div>\n          )}\n        </React.Fragment>\n      )}\n    </FieldArray>\n  </Grid>\n);\n\nexport default StudentForm;\n","export default __webpack_public_path__ + \"static/media/remove_button.c88272c3.svg\";","import removeButton from \"../../img/remove_button.svg\";\nconst RemoveButtonIcon = () => (\n  <img\n    src={removeButton}\n    alt=\"remove button\"\n    className={\"cursor-pointer w-7\"}\n  />\n);\nexport default RemoveButtonIcon;\n","import firebase from \"firebase\";\nimport { firestore } from \"./App\";\n\nexport const CLASSES_COLLECTION = \"classes\";\nexport const STUDENT_COLLECTION = \"students\";\n\nexport const getTimestamp = () => firebase.firestore.Timestamp.now();\nexport const createWithTimestamp = () => ({ createdAt: getTimestamp() });\nexport const modifyTimestamp = () => ({ modifiedAt: getTimestamp() });\nexport const modifyAndCreateTimestamp = () => ({\n  ...createWithTimestamp(),\n  ...modifyTimestamp(),\n});\n\n// react router to redirect\n// https://stackoverflow.com/questions/31079081/programmatically-navigate-using-react-router\nexport const redirectTo = (history: any, page: string): void => {\n  history.push(page);\n};\n\nconst setIsActive = (\n  collection: string,\n  id: string | undefined,\n  isActive: boolean\n) => {\n  firestore\n    .collection(collection)\n    .doc(id)\n    .set(\n      {\n        isActive: isActive,\n        ...modifyTimestamp(),\n      },\n      { merge: true }\n    );\n};\n\n// const removeStudent = (id: string | undefined) => {\n//   setIsActive(STUDENT_COLLECTION, id, false);\n// };\n\nexport const removeClass = (id: string | undefined) => {\n  setIsActive(CLASSES_COLLECTION, id, false);\n};\n\nexport const removeStudentFromClass = (id: string | undefined) => {\n  firestore\n    .collection(\"students\")\n    .doc(id)\n    .set(\n      {\n        classID: \"\",\n        ...modifyTimestamp(),\n      },\n      { merge: true }\n    );\n};\n","import clsx from \"clsx\";\nimport { ErrorMessage, Field, Form, Formik } from \"formik\";\nimport React, { useState } from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { useHistory } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { auth, firestore } from \"../App\";\nimport StudentForm from \"../Components/Students/StudentForm\";\nimport RemoveButtonIcon from \"../Components/Utils/RemoveButtonIcon\";\nimport {\n  CLASSES_COLLECTION,\n  modifyAndCreateTimestamp,\n  redirectTo,\n  STUDENT_COLLECTION,\n} from \"../utils\";\n\nexport interface Student {\n  firstName: string;\n  lastName: string;\n  gender: string;\n  isEditable?: boolean;\n  id?: string;\n  isActive?: boolean;\n}\n\nconst FIRST_NAME_DEFAULT = \"\";\nconst LAST_NAME_DEFAULT = \"\";\nconst GENDER_DEFAULT = \"\";\n\nconst DEFAULT_STUDENT = (): Student => ({\n  firstName: FIRST_NAME_DEFAULT,\n  lastName: LAST_NAME_DEFAULT,\n  gender: GENDER_DEFAULT,\n  isEditable: true,\n});\n\nconst produceDefaults = (n = 1, defaultObj = DEFAULT_STUDENT): Student[] => {\n  const defaults: Student[] = [];\n  for (let i = 0; i < n; i++) {\n    defaults.push(defaultObj());\n  }\n  return defaults;\n};\n\nconst CreateClassForm = () => {\n  const [user] = useAuthState(auth);\n  const history = useHistory();\n\n  const studentsData = produceDefaults(1);\n\n  const [students] = useState<Student[]>(studentsData); // come from some network request\n  return (\n    <section>\n      <section>\n        <p>Teacher: {user?.displayName}</p>\n      </section>\n      <section>\n        <Formik\n          initialValues={{ students: students, className: \"\" }}\n          onSubmit={async (values) => {\n            createStudentAndClass({\n              students: values.students,\n              className: values.className,\n              teacherId: user?.uid,\n              history: history,\n            });\n          }}\n          validationSchema={FormSchema}\n        >\n          {({ values }) => (\n            <Form>\n              <label htmlFor=\"className\">Class Name </label>\n              <Field name={\"className\"}></Field>\n              <ErrorMessage\n                name={`className`}\n                render={(msg) => <InlineError text={msg} />}\n              />\n              <StudentForm students={values.students} />\n            </Form>\n          )}\n        </Formik>\n      </section>\n      {/* <h1>results:</h1>\n      <pre>{JSON.stringify(submission, undefined, 2)}</pre> */}\n    </section>\n  );\n};\n\nexport const RemoveButton = ({\n  remove,\n  index,\n}: {\n  remove: Function;\n  index: number;\n}) => {\n  return (\n    <div\n      onClick={(e) => {\n        remove(index);\n      }}\n      className={clsx([\"flex\", \"justify-center items-center\"])}\n    >\n      <div>\n        <RemoveButtonIcon />\n      </div>\n    </div>\n  );\n};\n\n/**\n * Handles the Submission of a class and its students\n *\n * @param {({\n *   students: Student[];\n *   className: string;\n *   teacherId: string | undefined;\n *   history: any; // react router type\n * })} {\n *   students,\n *   className,\n *   teacherId,\n *   history,\n * }\n */\nconst createStudentAndClass = async ({\n  students,\n  className,\n  teacherId,\n  history,\n}: {\n  students: Student[];\n  className: string;\n  teacherId: string | undefined;\n  history: any; // react router type\n}) => {\n  try {\n    const classIDRef = await firestore.collection(CLASSES_COLLECTION).add({\n      name: className,\n      teacherId: teacherId,\n      isActive: true,\n      ...modifyAndCreateTimestamp(),\n    });\n    try {\n      const batch = firestore.batch();\n      students.forEach((student) => {\n        var docRef = firestore.collection(STUDENT_COLLECTION).doc(); //automatically generate unique id\n        batch.set(docRef, {\n          firstName: student.firstName,\n          lastName: student.lastName,\n          gender: student.gender,\n          classID: classIDRef.id,\n          isActive: true,\n          // Using the reference data type is apparently more inconvenient than strings rn...\n          //   https://stackoverflow.com/questions/46568850/what-is-firebase-firestore-reference-data-type-good-for\n          //   classID: firestore.doc(`${CLASSES_COLLECTION}/${classIDRef.id}`),\n          ...modifyAndCreateTimestamp(),\n        });\n      });\n      await batch.commit();\n    } catch (err) {\n      console.error(\"Error inserting students\", err);\n    }\n  } catch (err) {\n    console.error(\"Error inserting class\", err);\n  }\n  console.log(\"Insertion Successful!\");\n  redirectTo(history, \"/\");\n};\n\nexport const InlineError = ({ text }: { text: string }) => (\n  <i className=\"text-red-700\">{text}</i>\n);\n\nexport const NewStudentSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(70, \"Too Long!\")\n    .required(\"Required\"),\n  lastName: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(70, \"Too Long!\")\n    .required(\"Required\"),\n  gender: Yup.string().ensure().required(\"Required\"),\n});\n\nexport const studentsValidation = {\n  students: Yup.array().of(NewStudentSchema),\n};\n\nconst FormSchema = Yup.object().shape({\n  ...studentsValidation,\n  className: Yup.string()\n    .min(2, \"Too Short!\")\n    .max(70, \"Too Long!\")\n    .required(\"Required\"),\n});\n\nexport const AddStudentButton = ({ push }: { push: any }) => {\n  return (\n    <div\n      onClick={(e) => {\n        push(...produceDefaults(1));\n      }}\n      className={clsx([\"cursor-pointer\"])}\n    >\n      <div>+ Add Student</div>\n    </div>\n  );\n};\n\nexport default CreateClassForm;\n","import clsx from \"clsx\";\n\nconst cardClasses = [\n  \"shadow-lg\",\n  \"rounded-md\",\n  \"bg-purple-200\",\n  \"cursor-pointer\",\n  \"transform\",\n  \"transition\",\n  \"hover:scale-110\",\n  \"motion-reduce:transform-none\",\n  \"w-full\",\n  \"h-20\",\n  \"flex\",\n  \"justify-center\",\n  \"items-center\",\n];\n\nconst CardWrapper = ({ children, onClick, styles = [] }: any) => {\n  return (\n    <div className={clsx([cardClasses, ...styles])} onClick={onClick}>\n      {children}\n    </div>\n  );\n};\n\nexport default CardWrapper;\n","import React from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport CardWrapper from \"../Utils/CardWrapper\";\n\nexport interface IClassCard {\n  name: string;\n  teacherId: string;\n  id: string;\n  isActive?: boolean;\n}\n\nexport const ClassCard = ({\n  name,\n  teacherId,\n  id,\n  toPath,\n}: IClassCard & { toPath: string }) => {\n  return (\n    <Link to={toPath}>\n      <CardWrapper>\n        <h1>{name}</h1>\n      </CardWrapper>\n    </Link>\n  );\n};\n\nconst ClassCardProvider = ({ name, teacherId, id }: IClassCard) => {\n  let { url } = useRouteMatch();\n  let toPath = `${url}class/${id}`;\n  return (\n    <ClassCard name={name} teacherId={teacherId} id={id} toPath={toPath} />\n  );\n};\n\nexport default ClassCardProvider;\n","import React from \"react\";\nimport { Link, useRouteMatch } from \"react-router-dom\";\nimport CardWrapper from \"../Utils/CardWrapper\";\n\nexport const CreateClassCard = ({ toPath }: { toPath: string }) => {\n  return (\n    <Link to={toPath}>\n      <CardWrapper>\n        <p>Create New Class</p>\n      </CardWrapper>\n    </Link>\n  );\n};\n\nconst CreateClassCardProvider = () => {\n  let { url } = useRouteMatch();\n  return <CreateClassCard toPath={`${url}class/createClass`} />;\n};\n\nexport default CreateClassCardProvider;\n","import firebase from \"firebase\";\nimport React from \"react\";\nimport { useCollectionData } from \"react-firebase-hooks/firestore\";\nimport { CLASSES_COLLECTION } from \"../../utils\";\nimport Grid from \"../Utils/Grid\";\nimport ClassCardProvider, { IClassCard } from \"./ClassCard\";\nimport CreateClassCardProvider from \"./CreateClassCard\";\n\nconst ClassGridProvider = ({\n  teacherId,\n}: {\n  teacherId: string | undefined;\n}) => {\n  const [classes, loading, error] = useCollectionData<IClassCard>(\n    firebase\n      .firestore()\n      .collection(CLASSES_COLLECTION)\n      .where(\"teacherId\", \"==\", teacherId),\n    {\n      idField: \"id\",\n      snapshotListenOptions: { includeMetadataChanges: true },\n    }\n  );\n  return (\n    <React.Fragment>\n      {error && <strong>Error: {JSON.stringify(error)}</strong>}\n      {loading && <span>Loading...</span>}\n      <ClassGrid classes={classes?.filter((e) => e.isActive === true)} />\n    </React.Fragment>\n  );\n};\n\nconst ClassGrid = ({\n  classes,\n  newClass = true,\n}: {\n  classes: IClassCard[] | undefined;\n  newClass?: boolean;\n}) => {\n  return (\n    <Grid>\n      {newClass ? <CreateClassCardProvider /> : null}\n      {classes?.map((c) => (\n        <ClassCardProvider name={c.name} teacherId={c.teacherId} id={c.id} />\n      ))}\n    </Grid>\n  );\n};\n\nexport default ClassGridProvider;\n","import React from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { auth } from \"../App\";\nimport ClassList from \"../Components/Classes/ClassGrid\";\n\nexport default function HomePage() {\n  const [user] = useAuthState(auth);\n  return (\n    <div className={\"my-5\"}>\n      <h1 className={\"text-3xl py-5\"}>Your Classes</h1>\n      <ClassList teacherId={user?.uid} />\n      {/* <h1>Students</h1>\n      <StudentList /> */}\n    </div>\n  );\n}\n","import clsx from \"clsx\";\nimport firebase from \"firebase\";\nimport { Form, Formik } from \"formik\";\nimport React from \"react\";\nimport {\n  useCollectionData,\n  useDocumentData,\n} from \"react-firebase-hooks/firestore\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport * as Yup from \"yup\";\nimport { firestore } from \"../App\";\nimport StudentForm from \"../Components/Students/StudentForm\";\nimport {\n  CLASSES_COLLECTION,\n  modifyAndCreateTimestamp,\n  redirectTo,\n  removeClass,\n  removeStudentFromClass,\n  STUDENT_COLLECTION,\n} from \"../utils\";\nimport { Student, studentsValidation } from \"./CreateClassForm\";\nimport RemoveButtonIcon from \"../Components/Utils/RemoveButtonIcon\";\n\ninterface TeachingClass {\n  name: string;\n  teacherId: string;\n  createdAt: Date;\n  modifiedAt: Date;\n  id?: string;\n}\n\nconst addStudentToExistingClass = async ({\n  students,\n  classID,\n}: {\n  students: Student[];\n  classID: string | undefined;\n}) => {\n  try {\n    const batch = firestore.batch();\n    students.forEach((student) => {\n      var docRef = firestore.collection(STUDENT_COLLECTION).doc(); //automatically generate unique id\n      batch.set(docRef, {\n        firstName: student.firstName,\n        lastName: student.lastName,\n        gender: student.gender,\n        classID: classID,\n        isActive: true,\n        // Using the reference data type is apparently more inconvenient than strings rn...\n        //   https://stackoverflow.com/questions/46568850/what-is-firebase-firestore-reference-data-type-good-for\n        //   classID: firestore.doc(`${CLASSES_COLLECTION}/${classIDRef.id}`),\n        ...modifyAndCreateTimestamp(),\n      });\n    });\n    await batch.commit();\n  } catch (err) {\n    console.error(\"Error inserting students\", err);\n  }\n};\n\nconst ViewClassFormProvider = () => {\n  let { classID }: { classID: string } = useParams();\n\n  const [students, loading, error] = useCollectionData<Student>(\n    firebase\n      .firestore()\n      .collection(STUDENT_COLLECTION)\n      .where(\"classID\", \"==\", classID)\n      .where(\"isActive\", \"==\", true),\n    {\n      idField: \"id\",\n      snapshotListenOptions: { includeMetadataChanges: true },\n    }\n  );\n  const [targetClass] = useDocumentData<TeachingClass>(\n    firebase.firestore().doc(`${CLASSES_COLLECTION}/${classID}`),\n    {\n      idField: \"id\",\n      snapshotListenOptions: { includeMetadataChanges: true },\n    }\n  );\n\n  return (\n    <ViewClassForm\n      classID={classID}\n      className={targetClass?.name}\n      error={error}\n      loading={loading}\n      students={students}\n    />\n  );\n};\n\nconst StudentsSchema = Yup.object().shape(studentsValidation);\n\nexport const ViewClassForm = ({\n  className,\n  error = undefined,\n  loading = false,\n  students,\n  classID,\n}: {\n  className: string | undefined;\n  error: object | undefined;\n  loading: boolean;\n  students: Student[] | undefined;\n  classID: string | undefined;\n}) => {\n  const history = useHistory();\n  return (\n    <React.Fragment>\n      <div className=\"flex justify-between my-5\">\n        <h1 className={\"text-2xl\"}>{className}</h1>\n\n        <div\n          className={clsx(\"cursor-pointer\")}\n          onClick={(e) => {\n            if (\n              window.confirm(\n                \"Are you sure you want to delete this class? This cannot be undone\"\n              )\n            ) {\n              removeClass(classID);\n              redirectTo(history, \"/\");\n            }\n          }}\n        >\n          <h1>DELETE CLASS</h1>\n        </div>\n      </div>\n\n      {error && <strong>Error: {JSON.stringify(error)}</strong>}\n      {loading && <span>Loading...</span>}\n      <table\n        className=\"table-fixed w-full text-left\"\n        style={{ borderCollapse: \"separate\", borderSpacing: \"0 1em;\" }}\n      >\n        <thead>\n          <tr>\n            <th className=\"w-1/5\">First Name</th>\n            <th className=\"w-1/5\">Last Name</th>\n            <th className=\"w-1/5\">Gender</th>\n            <th className=\"w-1/5\">Report</th>\n            <th className=\"w-1/5\"></th>\n          </tr>\n        </thead>\n        <tbody>\n          {students?.map(({ firstName, lastName, gender, id }: Student) => {\n            const reportIsDone = false;\n            return (\n              <tr\n                className={clsx(reportIsDone ? \"bg-green-200\" : \"bg-red-200\")}\n                key={id}\n              >\n                <td>{firstName}</td>\n                <td>{lastName}</td>\n                <td>{gender}</td>\n                <td\n                  className={clsx(\"cursor-pointer\")}\n                  onClick={(e) => {\n                    redirectTo(history, `/student/${id}`);\n                  }}\n                >\n                  Report Link\n                </td>\n                <td\n                  className={clsx(\n                    \"cursor-pointer\",\n                    \"flex\",\n                    \"flex\",\n                    \"justify-center items-center\"\n                  )}\n                  onClick={(e) => {\n                    if (\n                      window.confirm(\n                        \"Are you sure you want to delete this student from this class?\"\n                      )\n                    ) {\n                      removeStudentFromClass(id);\n                    }\n                  }}\n                >\n                  <RemoveButtonIcon />\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n\n      <Formik\n        initialValues={{ students: [] }}\n        onSubmit={async (values, { resetForm }) => {\n          console.log(\"submitted\", values);\n          await addStudentToExistingClass({\n            students: values.students,\n            classID: classID,\n          });\n          resetForm();\n        }}\n        validationSchema={StudentsSchema}\n      >\n        {({ values }) => (\n          <Form>\n            <StudentForm students={values.students} />\n          </Form>\n        )}\n      </Formik>\n    </React.Fragment>\n  );\n};\n\nexport default ViewClassFormProvider;\n","import { useParams } from \"react-router-dom\";\n\nconst ViewStudent = () => {\n  let { studentID }: any = useParams();\n  return <h1>viewing student: {studentID}</h1>;\n};\n\nexport default ViewStudent;\n","import firebase from \"firebase\";\nimport React from \"react\";\nimport GoogleButton from \"react-google-button\";\nimport { auth } from \"./App\";\n\nexport default function SignIn() {\n  const signInWithGoogle = () => {\n    const provider = new firebase.auth.GoogleAuthProvider();\n    auth.signInWithPopup(provider);\n  };\n\n  return (\n    <>\n      {/* <button className=\"sign-in\" onClick={signInWithGoogle}>\n        Sign in with Google\n      </button> */}\n      <GoogleButton\n        type=\"dark\" // can be light or dark\n        onClick={signInWithGoogle}\n      />\n    </>\n  );\n}\n","export default __webpack_public_path__ + \"static/media/logout.9542746e.svg\";","import { auth } from \"./App\";\nimport logout from \"./img/logout.svg\";\n\nexport default function SignOut() {\n  return (\n    auth.currentUser && (\n      <div className={\"flex justify-end\"}>\n        <div className={\"flex cursor-pointer hover:bg-red-500 rounded-full p-1\"} onClick={() => auth.signOut()}>\n          <img src={logout} alt=\"logout button\" className={\"h-full w-10\"}></img>\n          <button className=\"sign-out\">Sign Out</button>\n        </div>\n      </div>\n    )\n  );\n}\n","import \"firebase/analytics\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nimport React from \"react\";\nimport { useAuthState } from \"react-firebase-hooks/auth\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n// import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport CreateClassForm from \"./Pages/CreateClassForm\";\nimport HomePage from \"./Pages/Home\";\nimport ViewClassForm from \"./Pages/ViewClassForm\";\nimport ViewStudent from \"./Pages/ViewStudent\";\nimport SignIn from \"./Signin\";\nimport SignOut from \"./Signout\";\n\nfirebase.initializeApp({\n  apiKey: \"AIzaSyCwxiDrVBzpiEtz5rL9eJt6bZIdymyTQ30\",\n  authDomain: \"ga-comments.firebaseapp.com\",\n  projectId: \"ga-comments\",\n  storageBucket: \"ga-comments.appspot.com\",\n  messagingSenderId: \"671616870740\",\n  appId: \"1:671616870740:web:74456365bd146415e180c1\",\n  measurementId: \"G-MMQSJ4ES92\",\n});\n\nexport const auth = firebase.auth();\n\nexport const firestore = firebase.firestore();\nexport const analytics = firebase.analytics();\n\nif (window.location.hostname === \"localhost\") {\n  firestore.useEmulator(\"localhost\", 8080);\n}\nfunction App() {\n  const [user] = useAuthState(auth);\n\n  return (\n    <div className=\"App mx-8\">\n      {user ? (\n        <div className={\"flex justify-between items-center\"}>\n          <div className={\"flex  items-center\"}>\n            <img\n              src={user?.photoURL ?? \"\"}\n              alt={\"Profile Pic\"}\n              className={\"rounded-full h-8 w-8\"}\n            />\n            <h2 className={\"ml-2\"}>Welcome {user?.displayName}!</h2>\n          </div>\n\n          <SignOut />\n        </div>\n      ) : null}\n\n      {user ? (\n        <section>\n          <Main />\n        </section>\n      ) : (\n        <section className={\"flex h-screen justify-center items-center\"}>\n          <SignIn />\n        </section>\n      )}\n    </div>\n  );\n}\n\nconst Main = () => {\n  return (\n    <>\n      <Home />\n    </>\n  );\n};\n\nfunction Home() {\n  return (\n    <Router>\n      <div>\n        <ul>\n          {/* <li>\n            <Link to=\"/class/123\">Class View 123</Link>\n          </li> */}\n        </ul>\n\n        <hr />\n\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route path={`/class/createClass`}>\n            <CreateClassForm />\n          </Route>\n          <Route path={`/class/:classID`}>\n            <ViewClassForm />\n          </Route>\n          <Route path={`/student/:studentID`}>\n            <ViewStudent />\n          </Route>\n          <Route path=\"/\">\n            <HomePage />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\n// function AddClassPage() {\n//   // We can use the `useParams` hook here to access\n//   // the dynamic pieces of the URL.\n//   let { id } = useParams<{ id: string }>();\n\n//   return (\n//     <div>\n//       <h2>Class Number, {id}</h2>\n//     </div>\n//   );\n// }\n\n// function Student() {\n//   return (\n//     <div>\n//       <h2>student</h2>\n//     </div>\n//   );\n// }\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}